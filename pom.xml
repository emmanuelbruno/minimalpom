<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- The Version in the Maven coordinates is autogenerated by the jgit-flow maven plugin -->
    <groupId>fr.univtln.bruno.pom</groupId>
    <artifactId>minimal-pom</artifactId>
    <version>1.0-initial-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.release>11</maven.compiler.release>

        <github.account>emmanuelbruno</github.account>

        <jackson.version>2.10.3</jackson.version>
        <hibernate.version>5.4.13.Final</hibernate.version>
        <slf4j.version>1.7.30</slf4j.version>
    </properties>

    <name>${project.artifactId}</name>
    <description>A minimal pom</description>
    <url>https://${github.account}.github.io/${project.artifactId}/</url>
    <inceptionYear>2017</inceptionYear>

    <organization>
        <name>Université de Toulon</name>
        <url>http://www.univ-tln.fr</url>
    </organization>

    <developers>
        <developer>
            <id>emmanuelbruno</id>
            <name>Emmanuel Bruno</name>
            <email>bruno@univ-tln.fr</email>
            <url>http://bruno.univ-tln.fr</url>
            <organization>Université de Toulon</organization>
            <organizationUrl>http://www.univ-tln.fr</organizationUrl>
            <roles>
                <role>architect</role>
                <role>developer</role>
            </roles>
            <timezone>Europe/Paris</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git@github.com:${github.account}/${project.artifactId}.git</connection>
        <url>https://github.com/${github.account}/${project.artifactId}/tree/${project.scm.tag}</url>
    </scm>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/${github.account}/${project.artifactId}/issues</url>
    </issueManagement>

    <repositories>
        <repository>
            <id>projectlombok.org</id>
            <url>http://projectlombok.org/mavenrepo</url>
        </repository>

        <repository>
            <id>bintray-brunoe-maven</id>
            <name>bintray</name>
            <url>https://dl.bintray.com/brunoe/maven</url>
        </repository>
    </repositories>

    <distributionManagement>
        <repository>
            <id>bintray</id>
            <name>brunoe-maven</name>
            <url>https://api.bintray.com/maven/brunoe/maven/${project.artifactId}/;publish=1</url>
        </repository>
    </distributionManagement>

    <!-- These dependencies configuration is centralized
  but they have to be explicitly added to the children projects
  -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>42.2.12</version>
            </dependency>

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.19</version>
            </dependency>

            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>1.4.200</version>
            </dependency>

            <!-- Logging with sl4j and one of : -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>1.2.3</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-jdk14</artifactId>
                <version>${slf4j.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.ws.rs</groupId>
                <artifactId>javax.ws.rs-api</artifactId>
                <version>2.1.1</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-annotations</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <!-- the core, which includes Streaming API, shared low-level abstractions (but NOT data-binding) -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <!-- databinding; ObjectMapper, JsonNode and related classes are here -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <dependency>
                <groupId>javax.persistence</groupId>
                <artifactId>persistence-api</artifactId>
                <version>1.0.2</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>eclipselink</artifactId>
                <version>2.7.6</version>
            </dependency>

            <!-- JPA Hibernate -->
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-entitymanager</artifactId>
                <version>${hibernate.version}</version>
            </dependency>
            <!-- Hibernate For connection pooling -->
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-c3p0</artifactId>
                <version>${hibernate.version}</version>
            </dependency>

            <!-- Bean validation -->
            <dependency>
                <groupId>javax.validation</groupId>
                <artifactId>validation-api</artifactId>
                <version>2.0.1.Final</version>
            </dependency>
            <dependency>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-validator</artifactId>
                <version>6.1.2.Final</version>
            </dependency>
            <dependency>
                <groupId>javax.el</groupId>
                <artifactId>javax.el-api</artifactId>
                <version>3.0.0</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <!-- These dependencies configuration is centralized
     but they have to be explicitly added to the children projects
     -->
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.2.0</version>
                    <executions>
                        <execution>
                            <id>create-executable-jar</id>
                            <phase>package</phase>
                            <goals>
                                <goal>single</goal>
                            </goals>
                            <configuration>
                                <descriptorRefs>
                                    <descriptorRef>
                                        jar-with-dependencies
                                    </descriptorRef>
                                </descriptorRefs>
                                <archive>
                                    <manifest>
                                        <mainClass>${app.main.class}</mainClass>
                                    </manifest>
                                </archive>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- This plugins implements the gitflow branching model (http://nvie.com/git-model,
                https://www.atlassian.com/git/tutorials/comparing-workflows/#!workflow-gitflow )
                for maven. It gives an automatic way to manage versions and branches.
                https://bitbucket.org/atlassian/jgit-flow/wiki/Home

                mvn jgitflow:feature-start:
                  creates a new feature branch; pushes the branch to origin automatically (can be shared and
                  used by jenkins).
                mvn jgitflow:feature-finish:
                  merges the feature branch back into the development branch and pushes to origin.
                    The good way :
                        git fetch : make sure your local repo copy is up-to-date
                        git checkout development : go to development
                        git merge origin/development : make sure your local develop is up-to-date (origin being the remote's name here)
                        git checkout <feature-branch> : go to you feature branch again
                        git merge develop : Merge and solve conflicts, if any (on you feature branch)
                        mvn jgitflow:feature-finish you already solved the conflicts
                mvn jgitflow:release-start:
                   creates a release branch (freeze to prepare a release, only bugfix, documentation
                   and translation) and pushes it to origin.
                mvn jgitflow:release-finish:
                   builds, tags and merges the release branch back into master and development;
                   updates versions in master and development branches
                mvn jgitflow:hotfix-start: like mvn jgitflow:release-start but branches off of master
                mvn jgitflow:hotfix-finish: like mvn jgitflow:release-finish

                We forbid deploy from the workstations, it has to be done by the C.I. server.
                -->
                <plugin>
                    <groupId>external.atlassian.jgitflow</groupId>
                    <artifactId>jgitflow-maven-plugin</artifactId>
                    <version>1.0-m5.1</version>
                    <configuration>
                        <!-- Enable this to push to origin using SSH keys -->
                        <enableSshAgent>true</enableSshAgent>
                        <!-- Keep your maven submodules at the same version as the parent POM -->
                        <autoVersionSubmodules>true</autoVersionSubmodules>
                        <!-- Pushing in-development features to origin allows all devs to see what each other
                             are working on                                        -->
                        <pushFeatures>true</pushFeatures>
                        <!-- This allows the CI server (e.g. Jenkins) to automatically push new releases to
                             origin; you can then either manually deploy them or, if you are doing Continuous
                             Deployments, auto-deploy them to prod -->
                        <pushReleases>true</pushReleases>
                        <pushHotfixes>true</pushHotfixes>

                        <!-- append the feature name to the version on the feature branch. -->
                        <enableFeatureVersions>true</enableFeatureVersions>
                        <!-- Prevents deployments from dev workstations so that they can be done by a CI
                             server  -->
                        <noDeploy>true</noDeploy>

                        <!-- squash>true</squash -->

                        <scmCommentPrefix>[gitflow]</scmCommentPrefix>

                        <!-- A VOIR -->
                        <featureRebase>false</featureRebase>

                        <!--pullDevelop>true</pullDevelop>
                        <pullMaster>true</pullMaster-->

                        <flowInitContext>
                            <masterBranchName>master</masterBranchName>
                            <developBranchName>develop</developBranchName>
                            <featureBranchPrefix>feature/</featureBranchPrefix>
                            <releaseBranchPrefix>release/</releaseBranchPrefix>
                            <hotfixBranchPrefix>hotfix/</hotfixBranchPrefix>
                            <versionTagPrefix>${project.artifactId}-</versionTagPrefix>
                        </flowInitContext>
                    </configuration>
                </plugin>


            </plugins>
        </pluginManagement>

        <plugins>
            <!-- This plugins enforce the required environment : maven and jdk version.
                 http://maven.apache.org/enforcer/maven-enforcer-plugin/
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>3.0.0-M3</version>
                <executions>
                    <execution>
                        <id>enforce</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.6.2</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>11</version>
                                </requireJavaVersion>
                                <!--requireOS>
                                    <family>unix</family>
                                </requireOS-->
                                <!-- requires that dependency version numbers converge -->
                                <!-- dependencyConvergence /-->
                                <!-- checks that the versions within the reactor are consistent
                                furthermore it will check that every module within the project
                                contains a parent and that the parent is part of the reactor build
                                -->
                                <reactorModuleConvergence>
                                    <message>The reactor is not valid</message>
                                    <ignoreModuleDependencies>true</ignoreModuleDependencies>
                                </reactorModuleConvergence>
                                <!-- checks that specified environment variables are set-->
                                <requireEnvironmentVariable>
                                    <variableName>JAVA_HOME</variableName>
                                    <variableName>MAVEN_HOME</variableName>
                                </requireEnvironmentVariable>
                                <!-- checks that  that the version for each dependency resolved
                                during a build, is equal to or higher than all transitive dependency declarations -->
                                <!--requireUpperBoundDeps>
                                </requireUpperBoundDeps-->
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>


</project>
